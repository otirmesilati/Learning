// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX   LESSON 03: STATIC/TEMP/CONST   XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

// -> classes: 4
// 1. MyString2
// 2. MyPoint3
// 3. ConstantString
// 4. Student1
// -> functions: 5
// 1. lecture_2_main
// TODO: finish this!

// ----------------------------------------- Simple Applicative examples ----------------------------------------
// ref cube and procedure in main here //
// ----------------------------------------------- Long examples ------------------------------------------------

#pragma once
#include <iostream>
using namespace std;



#ifndef MY_STRING_2
#ifndef MY_POINT_3
#ifndef MY_STRING_3
#ifndef STUDENT_1

#define MY_STRING_2
#define MY_POINT_3
#define MY_STRING_3
#define STUDENT_1



class MyString2
{

public:

	MyString2(const char* str = NULL);

	~MyString2();

	void print_string();

private:

	char* m_str;            // pointer implementation
	char array_str[250];    // array implementation

};


class MyPoint3
{

public:

	// NOTE: no ctors handling the name, just accessors //
	MyPoint3();
	MyPoint3(int, int);
	MyPoint3(const MyPoint3&);

	~MyPoint3();

	bool set_x(const int); // same as int in principle (local scope denies the change)
	bool set_y(int);
	bool set_name(const char*);

	 int get_x ()const;
	 int get_y ()const;
	 const char* get_name()const;

	void print_point();

private:

	int x, y;
	char name [30] ;

};


class ConstantString
{

public:

	ConstantString(char const * = NULL);

	~ConstantString();

	bool set_string(char const *);

	char const* get_string() const;

	void reverse() {}
	bool find(char)const;
	bool print_string();

	char operator[] (int)const;  // the compiler diffrentiates between the two signatures through the use of assignment
	char& operator[](int) ;

private:

	char my_string[300];
	int string_length;
};


class Student1
{

public:

	Student1(int = max_grade);
	Student1(const Student1&);

	~Student1();

	static int get_max_grade();

	bool print();

	const int student_grade;
	static int number_of_students;

private:

	static int max_grade;
	static Student1* impressive_student;

};


class Lecture3 {};


void string_2_testing();
void point_3_testing();
void constant_string_testing();
void student_static_testing();
void lecture_3_main();



#endif // !STUDENT_1
#endif // !MY_STRING_3
#endif // My_POINT_3
#endif // !MY_STRING_2
