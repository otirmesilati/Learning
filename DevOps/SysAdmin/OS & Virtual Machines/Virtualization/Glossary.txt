Map from the following:
1. <Stoped> at 08:20 :: Michael Horn's starter: https://www.youtube.com/watch?v=t-23HOKMer0
2. Nana's completing Virtualization concept: https://www.youtube.com/watch?v=mQP0wqNT_DI
3. <Stoped> at 0:07:41 :: Nana's Docker tutorial: https://www.youtube.com/watch?v=pg19Z8LL06w
4. Another, more easy docker tutorial: https://www.youtube.com/watch?v=b0HMimUb4f0
5. Nana's short kubernetes introduction video: https://www.youtube.com/watch?v=s_o8dwzRlu4&t=104s
6. Nana's longkubernetes introduction video: https://www.youtube.com/watch?v=X48VuDVv0do
7. virtual box tutorial: https://www.youtube.com/watch?v=nvdnQX9UkMY
8. DistroTube's virtmanager tips: https://www.youtube.com/watch?v=9FBhcOnCxM8
9. HypeV tutorial: https://www.youtube.com/watch?v=3I64TeJ4iNI
10. esxi tutorial: https://www.youtube.com/watch?v=wQurzzxkjy4&list=PLxTwjzMO9Zf62tCYP2rP0FqwVdzTbGPjU
11. proxmox playlist: https://www.youtube.com/watch?v=5j0Zb6x_hOk&list=PLT98CRl2KxKHnlbYhtABg6cF50bYa8Ulo
    

Nana's Virtualization:

1. 0:50 - intro to VM
2. 4:43 - Usage of hypervisors
3. 6:46 - Type 1 and Type 2 hypervisors
4. 11:30 - Comaines going the Virtualization road


Nana's Docker/Containeriazation tutorial:

1. 00:00 - intro to docker
2. 03:55 - dev & dep: local configurations vs containerazation infrastructure
3. 11:40 - docker vs VMs, layering, size-speed-comp 
4. 21:36 - docker images vs containers  
5. 26:33 - docker registry, dockerhub, image versioning
6. 32:00 - basic docker commands
7. 34:13 - Image running commands 
8. 39:05 - Port Binding, and process life cycling containers
9. 46:53 - Private Docker registry, and registry vs repo
10. 49:08 - Creating custom images - dockerizing apps (dockerfiles)
11. 1:02:37 - Docker UI client
12. 1:03:40 - Docker in SDLC

Nana's short Kubernetes video:
1.
2.
3.
4.
5.
6.
7.
8.
9.

Nana's long Kubernetes video:

1. 2:17 - Intro to k8, purpose and advantages``
2. 5:20 - K8 components, Node and Pod, Service, Volumes, Cluster, 
3. 22:28 - K8 Architecture, Node process, Master process
4. 34:44 - Minikube & kubectl, Production cluster setup, Local cluster setup, 
5. 44:51 - KubeCTL commands(CRUD, status checking, debugging) 
6. 1:02:03 - YAML config files, metadata, specs, and status parts, pod deployment(config in a config, labels and selectors)
7. 1:16:15 - 2 demo projects setup
8. 1:46:14 - K8s namepsaces(grouping, conflicts, resource sharing, limiting access), access service in another namespace, 
9. 2:01:52 - K8s ingress vs service, ingress controller, environment where the cluster runs + configuring TLS cert
10. 2:24:16 - helm package manager, helm charts, templating engine, helm chart structure, values injection into template files, versions and tiller communication
11. 2:38:09 - K8s volumes, (stopped at the start)
12. 
13. 
14. 













horn's:

- boxes software has built in os download option! nice

- benefit of disaster handling
- benefit of error recoveries with VMs : snapshots
- added security layer and minimizing harm in case of malware
- VM can abstract physical limitations 
- type 1 hypervisors/ bare metal : VMWare and hyperV 
- type 2 hypervisors/ hosted : virtual box and Q(uick)EMU(lator)
- type 1 hypervisor faster, as the host OS is trying to handle the efficency, but the guest OS is also slowed by background running proccesses 
- KVM as a kernel virtual machine is special, resmbles type 2 hypervisor and enables QEMU direct access to hardware , and feels like hardware acceleration tool
- need to check if OS virtualization is enabled

nana's short docker:

- docker is a dev/dep simplifying virtualization software (through packed containers that can be shared and distributed) 
- first dependencies were on local systems (postgres, redis, mosquito for messaging...)
-- every other dev now needs to install and configure their own local environments
--- very dependant on OS, so that might very well be a problem
--- a compound process to do, errors are prone along the way
--- might duplicate the process for different services -> solved by containers as they are services bundled with their dependencies, all they need is to be ran
---- docker solution even enables running different versions of same application - which most probably would conflict localy
- dep then vs now:
-- used to be operations team job to distrubute artifact (then)
-- installations bare metal (error prone: dependency hell) (then)
-- miscomunication (then)
-- application package with dependencies (now)
--- No configurations (now)
---- less room for these errors
--- it's a docker command
- containerazation vs virtualization
-- containerazation virtualizes ONLY os app layer, and uses the kernel of the host
-- virtualization virtualizes both os app layer and a designated kernel
-- docker files are much smaller than iso files becuase they aren't getting space for the kernel
-- similar reason they are much faster (not waiting for the kernel to boot up)
-- minus in docker: only compatible with linux systems








<<<<<<<< system images
< < < < < < < < Virtualized Orchestration > > > > > > > >









< < < < < < < < HyperVisors : efficient HarWare and VM controllers > > > > > > > > 

- virtmanager vs virtualbox - ones a complete system, and the othe just a gui?









< < < < < < < < Containerized Virtualization > > > > > > > >









