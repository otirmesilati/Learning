watch this: https://www.youtube.com/watch?v=hLaGd2pdK4M

Map from the following:
1. at the point's intro to python scripting: https://www.youtube.com/@qaatthepointcarloskidman8382
2. part 2, more scripting: https://www.youtube.com/watch?v=tGzyAoVU1Ks&list=PLelD030IW7swU6n75wOIeCC9hqKipub_w
3. selenium python-based tool, pylenium intro: https://www.youtube.com/watch?v=li1nc4SUojo&list=PLelD030IW7szbnSuyBWwjfV3XJB1CMbin
4. playwright intro: https://www.youtube.com/watch?v=wGr5rz8WGCE&t=362s
5. Playwright playlist: https://www.youtube.com/watch?v=4_m3HsaNwOE&list=PLhW3qG5bs-L9sJKoT1LC5grGT77sfW0Z8
6. Appium Tutorial: https://www.youtube.com/watch?v=tzpjaPU0rlQ&list=PLN9RL2PyZc19aq95VjhXzeUmuU4-6N6Qf
7. Cypress crash vid: https://www.youtube.com/watch?v=u8vMu7viCm8&t=244s

At the point's intro:
 
1.4. <Stoped> at 10:20 ::  git terms
2.1. pytest, packmans + commands, libraries, pycharm console
2.2. testing (unit test, ins and outs), checks
2.3. TDD (test_ files, features, scenario, gherkin), test functions, assert, 
2.4. no TDD problems, TDD pluses and positive/neg tests, exploring, syntax 2
3.1.
3.2.
3.3.
3.4.
4.1.
4.2.
5.1.
5.2.
5.3.
5.4.
6.1.
6.2.









hot to run in terminals(move to bash and batch):

-script

-- python .py: [python installed] --> python file_name.py
--js?
--ruby?
--php?
--perl?
--c#?
--go?
--R?
--tcl?
--hs?
--rs?
--swift?


-command

-- batch .bat:
-- bash .bsh:
-- powershell .ps1:
-- ps?









- tool creation for automating tasks
- pipeline design for artifacts 
- prepare testing solutions for feedback providing
- prepare data visualization for stakeholders + provide the inteligence needed
- system monitoring

- goal : better delivering quality










-ci tools - automating integration of merges & automating tests 
-- jenkins (one of the defining devops tools) - not how we define the artifact, but how we run it
---enables automation functionality, like python(jobs - scripts proccesses)
----written in bash
---- theres a python library for running jenkins jobs
---- Triggering jobs
----- By time - CRON scheduling
---logs:
---- log history available
-----Who ran job?
-----When did he run it? how long did it take?
-----machine administration can be shared
------operate on a single node
------Scripts can be shared
---portable
---Sudden Spike in job demand
----Job Orchestration done in nodes/agents (done by many machines, to deload from one machine the logs, tests..)
-----Delagating the workload:
------Master jenkins server
------Logs sit on another agent
------Building the application on another agent
------Running the python scripts by another agent
--- jenkins pipelines(groups of scripts, mostly codified) - the answer to the gitlabci
----groovy language
----comfortably Moving to an IDE like environment
-----machine running it -> node()
-----stage -> job to run
------inside the stage - the groovy scripts
---Environment configurations:
----jenkins can declare environment variables
--githubci
---first section - trigger definition:
----trigger initiation -> on:
----what kind of trigger -> push:
----relative to what -> branches: -<branch_name>
---second section - jobs definition:
----pipeline jobs declaration -> jobs:
----name of pipeline -> list-files:
----macine to run on -> <os_type-version>
----Job definition -> steps:





--circleci
--githubactions
--gitlabci









cd tools - deployment automation






& & & & & & Web Automation & & & & & &

^ ^ ^ ^ ^ Shared Automation Libraries ^ ^ ^ ^ ^

pip install requests

^ ^ ^ ^ CRUD HTTP user operations simulation ^ ^ ^ ^

^ ^ ^ ^ user simulated Requests ^ ^ ^ ^

returns HTTP status code -> paths.get

^ ^ ^ ^ Selenium ^ ^ ^ ^

pip install selenium


get -> opens site through URL specified


