Map from the following:
1. Jeremy's It Lab (episodes to continue from down below)
2. WireShark intro: https://www.youtube.com/watch?v=a_4MjV_-7Sw&t=2618s
3. Wireshark Playlist: https://www.youtube.com/watch?v=byL8VMEMC0M&list=PL_o0Qzu-8MKhg6co37kssx6lRdQ4o1YpX









skills for tablet:

network design
- drawing the 5 elements
- seperating LANs -> using router interfaces to do so, switches don't seperate LANs

representing data flow in network graphs
- continous flow: no jumping between nodes
- the response: in reverse order








PDU encapsulation and decpasulation:
- L4 to L1 header addings:
L4: Data * header4 = segment
L3: Data * header4 * header3 = packet
L2: trailer2 * Data * header4 * header3 * header2 = frame


Ethernet PDU breakdown
Size: 26B
Size Without frame header: 26 - 8 = 18B
Minimum Size of a frame: 64 - 18 = 46B (If the message is shorted tyan 46B there will be padding - adding zeros to fill in gaps)
Frame header(Usually not included in the frame size calculation):
- preamble(7B) + S(tart)F(rame)D(elimiter)(1B):
-- allows reciever clock synchronization: preparing to recieve the rest of the data
-- SFD marks the end of the preamble
- Destination:
-- Next L2 M(edia)A(ccess)C(ontrol) Adress to send
- Source & Destination(6B + 6B):
-- L2 MAC Adress which sent the frame
--- Unique addressed given to devices when they are made (O(rizational)U(nique)I(identifier))
--- 3 three Bytes are the OUI Which are assigned to the company of the device
- Type OR it can be a data length field(2B):
-- L3 protocol for the packet (most of the time - either ipv4 or ipv6)
Frame trailer -> F(rame)C(check)S(equence)
--- 1500 value or less - LENGTH 
--- 1536 or more - TYPE
Frame trailer: 
- F(rame)C(check)S(equence) (4B)
-- Cycling redundancy check for checking errors

IPV4 header:
- destination and source(4B) 




cisco i(nterworking)o(perating)s(ystem)
-user exec mode
-privilidged exec mode -> enable
-- copy running to startup config -> write memory/copy running-config startup-config
-- encrypt password -> service password-encryption
-- making a tougher password -> enable secret <password to make>
-- arp table -> show mac adress-table
-- clear arp table -> clear mac adress-table dynamic
-- clear are table line -> clear mac adress-table dynamic interface <interface_id>

--vlan configs:
---enter/create vlan config mode -> vlan <number>
----changing vlan name -> name new_name
---listing vlan port groups -> show vlan brief (1, 1002-1005 vlans are defaults)
---selecting ports as access ports -> switchport mode access
--- changing to a specific access port -> switchport access vlan <number>



-global configuration mode -> configure terminal
--making a password -> enable password <password to make>
--view running config file -> show running-config
--view startup config file -> show startup-config
-exit to go out of a mode
--config files
---running config file

---startup config file






F(ile)T(ransfer)P(rotocol)s
-ftp
-S(ecure)SH(ell)
--S(ecure)C(o)P(y)
-HTTP












Device Network
- elements (nodes)
-- the internet (un-known)
-- firewall
-- router(L3 element)
-- de-encapsulates a packet, and checks where to send it (via it's IP)
-- switch(L2 element)
---switch's access ports are definitavly switch interfaces meant for vlans
----trunk port = multiple-vlan functioning access port
--- 24+ RJ 45 interfaces/ports

-L(ocal)A(area)N(etwork) - group of devices taht will recieve broadcast frame (broadcast domain)
--broadcast problem : unnecessary and non secure (packets that dont go through router before reaching different department destination) broadcast traffic solution
---splitting to separate subnets
---switch in split subnet problem - can break router's virtual separation by broadcasting frames
----pyhsical separation solution: buy a different switch for each subnet 
----Logical separation solution: V(irtual)LAN - grouping switchports 
-----using same accessports for different vlans - trunk
------trunking works with vlan tagging the frames
-------trunk ports = tagged ports
--------enables inter VLAN routing - switching between vlans according to the packets
-------trunking protocols:
--------I(nter)S(witch)R(outing) - old proprietary protocol 
--------IEEE 802.1Q - industry standard
-------Regular Access ports = untagged ports





- Network Movement
-- L2 Level: Pathing
--- Each device has MAC adress
--- Each port has type (F0/0, f0/1.. For fast internet)
--- MAC Tables On Switch - Dynamic Learning MAC addresses
---- Dynamic: Learning/Binding MAC addresses to ports which they arrived from
---- The Learning proccess only happens when a packet arrives at a switch (Not when forwarded)
---- Not knowing where to send packets to? -> flood ports(send to every port except where the packet was recieved from)
---- Elements that get Un-wanted frames -> Drops the packets 
---- Elements removed after 5 minutes of inactivity
---Using ARP protocol for communication:
---- ARP
----- ARP table
------ internet adresses: IP
------ physical adresses: MAC
------ Types: static (defualt) or dynamic (learnt via ARP)
------ Aging: removed lines after 5 minutes
----- ARP request
------ switch will flood packet if the next jump is not known (Dest: FFFF.FFFF.FFFF) 
----- ARP reply
---- IP ping (ICMP)
----- ICMP request
----- ICMP reply

-- L3 Level: Routing
--- Each device has an IP
--- Routing tables on Routers - To check if there are known routes
---- Dynamic(OSPF): Learning/Binding IP Address And Sharing routing tables
----- Destination IP is itself? receive the packet
----- Destination IP is direct? forward it
----- Destination IP is not direct? send to next hop
--- Static routing: manually configuring routes











open systems interaction Model
L7:
- apps with internet capability (ie internet browsers)
- HTTP and HTTPS protocols
L6:
- translate app to net format, such as in encryption translation
L5:
- manages communication sessions between local app and remote app (api calls?)
L4:
- breaks down data to small chunks for transport
- establishes E2E communication and process to process communication for applications
L3(router operations):
- connects hosts of different LANs with IP protocol
- provides path selection 
L2(switch operations):
- direct node-to-node connection handling
-- One Receipient -> Unicast Frame
-- Flood -> Broadcast 
-- What more-cast names?
- defines data formatting for transmission in physical medium
- error/noise handling
L1: 
- rj45 and optic fibre cable standards
- converting data bits into electrical signals






tcp ip model
- used practacialy, influenced by osi

















transport
- full-duplex : send + recieve + same time
- Straight through cable -> Router/PC To switch 
- Cross Over cable -> Switch to same, Router/PC To same


transport speed
- metriced by bits and not bytes (unlike in storage)
- IEEE 802.3 standard for RJ45:
-- 10Mbps(ethernet)/100Mbps(fast ethernet) use 4 wires of the RJ45 8
-- 1Gbps(gig ethernet)/10Gbps(10 gig ethernet) use 8 wires of the RJ45 8


transport encapsulation and decapsulation
L4 data combination - segments
L3 data combination - packets













Ethernet Family

















RJ45 
- A cable can send + recieve
- copper internet cable has RJ45 connector ends
- ethernet Twisted Pair cabling (UTP cables)
- 100 meter max
-In ethernet/fast ethernet cables:
-- Router, PC, Firewall: 1/2 Tx, 3/6 Rx : Switch is the opposite
-- Switch: 1/2 Rx, 3/6 Tx
-- Most Devices are Auto MDI-X so straight/crossover isn't important

Optic-Fibers:
- A cable can either send OR recieve
- multi mode can reach up to 550 meters, single mode can go 30 km

db9-Rj45 rollover
- seems similar to VGA though has it's differences












client server 

& & & & & & Client-Server Model & & & & & &

- Request-Response based protocol

^ ^ ^ ^ ^ API Call: HTTP Requesting Format ^ ^ ^ ^ ^

GET: <Resource Route-name> <HTTP version>
HOST: <Server Domain Route-name>
Accept-Language: <Language Acronym>

https?

^ ^ ^ ^ ^ API Call: HTTP Response Format ^ ^ ^ ^ ^

<HTTP version> <status code>
Date: <day-month-year hour>
Content-Type: <file extension>
<HTML document content>

^ ^ ^ ^ DOM ^ ^ ^ ^

?

^ ^ ^ ^ Rendering HTML Documents ^ ^ ^ ^

?

url routing

?

PuTTY
- used to remotely access servers,
- access cli: serial -> open
- mostly SSHing and Telneting into.
commands: (what to do with this? need to see...)
- pscp -P 22 demo-file.zip () <sender part of the CLI command>
- root@<ipadress>:/root






















& & & & & & DNS - Client Server Model & & & & & &








server acts as forwarding agent

- ipconfig
- ipconfig /all
- ipconfig /displaydns

NestJS RESTful API
- popular for scalable server side applications
- nodejs framework







web server - serves requests
-ngnix 
--used to be on prem
--load balancer
--caching(storing a copy of a site once instead of generating it again and again)
--minimising and securing to one entry-point






TCP VS UDP

(ReWrite The following)
TCP: connection oriented protocol 
-> best for high reliability
-> implements three way handshake
- UDP: connectionless protocol-> streaming service
-> DNS 
-> VoIP


WebSite Inspector:
-console CLI
printing through pop up: alert(hello world)
removes everything and leaves text: document.body.innerHTML = 'hello';
`suppress pasting warning: allow pasting 
-styles:
image inspection: margin in orange, green is padding, and the blue is the element






dynamic resources:




































































< < < < < < < < Cloud Networking & Storage > > > > > > > > >





-cloud computing - Not on prem
--storage not on premise
-hosting models:
--dedicated server: 1 machine - 1 business - 1 web app
--virtual private server: 1 machine - 1 business - many web apss
--shared hosting: 1 machine - many business - many web apps 
--cloud hosting: many machines (virtualized) - many business - many web apps

-Amazon Web Servicess
--A(mazon)W(eb)S(ervices) - the Amazon C(loud)S(ervice)P(rovider)
---many services centralized in one Saas place 
----able to be chained into cloud architectures
----accesible via unified API
----priced through metered billing (usage pricing)
----rich monitoring for the services - AWS cloudtrail
----Iaas options: networking + compute + storage etc..
----Automation and dev tools are offered
---cloud platform is a basic CSP without all these features










Hardware:
- switches
-- 2960 catalyst switch
- routers:
-- 2911 cisco proprietary router
firewall:
-- 5505 cisco firewall



packet traces:
- add model names to devices: upper menu -> prefenerences -> interface -> show device name labels
- change different text visual preferences: upper menu -> prefenerences -> Font 




