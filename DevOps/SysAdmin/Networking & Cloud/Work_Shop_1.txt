Map from the following:
1. Jeremy's It Lab (episodes to continue from down below)
2. WireShark intro: https://www.youtube.com/watch?v=a_4MjV_-7Sw&t=2618s
3. Wireshark Playlist: https://www.youtube.com/watch?v=byL8VMEMC0M&list=PL_o0Qzu-8MKhg6co37kssx6lRdQ4o1YpX




episode 5: introduction to layer 2 mega portion
episode 6: some basic Layer 2 commands (ping, arp)
episode 7: add only routing, important terms if there are, and skip to quetions about routing
episode 8: same and add the important IOS terms 
episode 9: intro to switch interfaces
episode 10: more on packet structure and ipv4 header
episode 11: intro to routing and static routing
episode 12: packet flow until now
episode 13: more subnetting
episode 14: more subnetting 
episode 15: more subnetting 
episode 16: LAN, VLAN, and broadcast domains
episode 17: Trunking, native VLAN, router on a stick
episode 18: multi layer switch, inter VLAN routing
episode 19: dynamic trunking protocol vs VLAN trunking protocol
episode 20: network design points of failure, broadcast storms, into to spanning tree protocol 
episode 21: STP states, timers, BPDUs, into to portfast, it's loop problems and a bit on bpdu guard, a bit on it's load balancing
episode 22: rapid STP, comparison with STP, alternative port role, uplinkfast, backbonefast, and backup port, 
episode 23: intro to etherchannel, it's load balancing, link and port aggregation, 
episode 24: dynamic routing, types, RIPV and IGRP(distance vector routing protocols), Link state protocol, metrics, ECMP
episode 25: RIP(RIPv1 and 2) and EGRIP
episode 26: intro to OSPF, ospfv2, LSA flooding, OSPF areas,  
episode 27: OSPF metric/cost, OSPF neighbors(init/down/2 way/exstart/loading/full state)   
episode 28: OSPF network types, adjacency requirements, LSA types(router/network/AS external), loopback interfaces, broadcast network/point-2-point types
episode 29: F(irst)H(op)R(redundancy)P(rotocols), H(ot)S(tandby)RP, V(irtual)R(outer)RP, G(ateway)L(oad)BP, 
episode 30: into to TCP and UDP, L4 functionality(data transperency, reliability, error recovery, data sequencing, flow control), session Muxing, 3/4 handshakes 
episode 31: ipv6 fundementals, abbreviaton
episode 32: adress types, global unicast address, unique local, link local, multicast address, anycast address
episode 33: N(eighbor)D(iscovery)P(rotocol) - NS & NA, SLAAC(Stateless address auto configuration), ipv6 static routing, R(equest)F(or)C(omments),  
episode 34: 
episode 35: 
episode 36: 
episode 37: 




skills for tablet:

network design
- drawing the 5 elements
- seperating LANs -> using router interfaces to do so, switches don't seperate LANs

representing data flow in network graphs
- continous flow: no jumping between nodes
- the response: in reverse order








PDU encapsulation and decpasulation:
- L4 to L1 header addings:
L4: Data * header4 = segment
L3: Data * header4 * header3 = packet
L2: trailer2 * Data * header4 * header3 * header2 = frame


Frame PDU specifics
Size: 26B
Size Without frame header: 26 - 8 = 18B
Minimum Size of a frame: 64 - 18 = 46B (If the message is shorted tyan 46B there will be padding - adding zeros to fill in gaps)
Frame header(Usually not included in the frame size calculation):
- preamble(7B) + S(tart)F(rame)D(elimiter)(1B):
-- allows reciever clock synchronization: preparing to recieve the rest of the data
-- SFD marks the end of the preamble
- Destination:
-- Next L2 M(edia)A(ccess)C(ontrol) Adress to send
- Source & Destination(6B + 6B):
-- L2 MAC Adress which sent the frame
--- Unique addressed given to devices when they are made (O(rizational)U(nique)I(identifier))
--- 3 three Bytes are the OUI Which are assigned to the company of the device
- Type OR it can be a data length field(2B):
-- L3 protocol for the packet (most of the time - either ipv4 or ipv6)
Frame trailer -> F(rame)C(check)S(equence)
--- 1500 value or less - LENGTH 
--- 1536 or more - TYPE
Frame trailer: 
- F(rame)C(check)S(equence) (4B)
-- Cycling redundancy check for checking errors






cisco i(nterworking)o(perating)s(ystem)
-user exec mode
-privilidged exec mode -> enable
-- copy running to startup config -> write memory/copy running-config startup-config
-- encrypt password -> service password-encryption
-- making a tougher password -> enable secret <password to make>
-global configuration mode -> configure terminal
--making a password -> enable password <password to make>
--view running config file -> show running-config
--view startup config file -> show startup-config
-exit to go out of a mode
--config files
---running config file

---startup config file






F(ile)T(ransfer)P(rotocol)s
-ftp
-S(ecure)SH(ell)
--S(ecure)C(o)P(y)
-HTTP












Device Network
- elements (nodes)
-- the internet (un-known)
-- firewall
-- router(L3 element)
-- de-encapsulates a packet, and checks where to send it (via it's IP)
-- switch(L2 element)
--- 24+ RJ 45 interfaces/ports
- Network Movement
-- L2 Level:
--- Each device has MAC adress
--- Each port has type (F0/0, f0/1.. For fast internet)
--- MAC Tables On Switch - Dynamic Learning MAC addresses
---- Learning/Binding MAC addresses to ports which they arrived from
---- The Learning proccess only happens when a packet arrives at a switch (Not when forwarded)
---- Not knowing where to send packets to? -> flood ports(send to every port except where the packet was recieved from)
---- Elements that get Un-wanted frames -> Drops the packets 
---- Elements removed after 5 minutes of inactivity
---Using ARP protocol for communication:
---- ARP request
----- flood (Dest: FFFF.FFFF.FFFF) 
---- ARP reply
-LAN
-- According To the switches











open systems interaction Model
L7:
- apps with internet capability (ie internet browsers)
- HTTP and HTTPS protocols
L6:
- translate app to net format, such as in encryption translation
L5:
- manages communication sessions between local app and remote app (api calls?)
L4:
- breaks down data to small chunks for transport
- establishes E2E communication and process to process communication for applications
L3(router operations):
- connects hosts of different LANs with IP protocol
- provides path selection 
L2(switch operations):
- direct node-to-node connection handling
-- One Receipient -> Unicast Frame
-- Flood -> Broadcast 
-- What more-cast names?
- defines data formatting for transmission in physical medium
- error/noise handling
L1: 
- rj45 and optic fibre cable standards
- converting data bits into electrical signals






tcp ip model
- used practacialy, influenced by osi

















transport
- full-duplex : send + recieve + same time
- Straight through cable -> Router/PC To switch 
- Cross Oover cable -> Switch to same, Router/PC To same


transport speed
- metriced by bits and not bytes (unlike in storage)
- IEEE 802.3 standard for RJ45:
-- 10Mbps(ethernet)/100Mbps(fast ethernet) use 4 wires of the RJ45 8
-- 1Gbps(gig ethernet)/10Gbps(10 gig ethernet) use 8 wires of the RJ45 8


transport encapsulation and decapsulation
L4 data combination - segments
L3 data combination - packets













Ethernet Family

















RJ45 
- A cable can send + recieve
- copper internet cable has RJ45 connector ends
- ethernet Twisted Pair cabling (UTP cables)
- 100 meter max
-In ethernet/fast ethernet cables:
-- Router, PC, Firewall: 1/2 Tx, 3/6 Rx : Switch is the opposite
-- Switch: 1/2 Rx, 3/6 Tx
-- Most Devices are Auto MDI-X so straight/crossover isn't important

Optic-Fibers:
- A cable can either send OR recieve
- multi mode can reach up to 550 meters, single mode can go 30 km

db9-Rj45 rollover
- seems similar to VGA though has it's differences












client server 

& & & & & & Client-Server Model & & & & & &

- Request-Response based protocol

^ ^ ^ ^ ^ API Call: HTTP Requesting Format ^ ^ ^ ^ ^

GET: <Resource Route-name> <HTTP version>
HOST: <Server Domain Route-name>
Accept-Language: <Language Acronym>

https?

^ ^ ^ ^ ^ API Call: HTTP Response Format ^ ^ ^ ^ ^

<HTTP version> <status code>
Date: <day-month-year hour>
Content-Type: <file extension>
<HTML document content>

^ ^ ^ ^ DOM ^ ^ ^ ^

?

^ ^ ^ ^ Rendering HTML Documents ^ ^ ^ ^

?

url routing

?

PuTTY
- used to remotely access servers,
- access cli: serial -> open
- mostly SSHing and Telneting into.
commands: (what to do with this? need to see...)
- pscp -P 22 demo-file.zip () <sender part of the CLI command>
- root@<ipadress>:/root

















































































































& & & & & & DNS - Client Server Model & & & & & &








server acts as forwarding agent

- ipconfig
- ipconfig /all
- ipconfig /displaydns

NestJS RESTful API
- popular for scalable server side applications
- nodejs framework







web server - serves requests
-ngnix 
--used to be on prem
--load balancer
--caching(storing a copy of a site once instead of generating it again and again)
--minimising and securing to one entry-point






TCP VS UDP

(ReWrite The following)
TCP: connection oriented protocol 
-> best for high reliability
-> implements three way handshake
- UDP: connectionless protocol-> streaming service
-> DNS 
-> VoIP


WebSite Inspector:
-console CLI
printing through pop up: alert(hello world)
removes everything and leaves text: document.body.innerHTML = 'hello';
`suppress pasting warning: allow pasting 
-styles:
image inspection: margin in orange, green is padding, and the blue is the element






dynamic resources:











< < < < < < < < Cloud Networking & Storage > > > > > > > > >

- storage not on premise
hosting models:
- dedicated server: 1 machine - 1 business - 1 web app
- virtual private server: 1 machine - 1 business - many web apss
- shared hosting: 1 machine - many business - many web apps 
- cloud hosting: many machines (virtualized) - many business - many web apps
Amazon Web Servicess
- Amazon C(loud)S(ervice)P(rovider)
-- services accesible via single api
-- rich monitoring, infrastructure as code, automation 
-- cloud platform is a basic CSP without all these features










