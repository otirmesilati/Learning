Application server
-communication to back:
--peer to peer (no server, shared through other clients)
--client server (https, tcp udp, web services):
---one way communication, client tom server: HTTP
---one way communication, server to client: sockets
---two way communication: socket.io
















dev design
tablet skills - umling the design patterns

- design patterns: scoped in the logic design 

-- Creational:
--- Singleton
--- Prototype
--- Factory
--- Abstract Factory
--- Builder

-- Structural:

--- Adapter
--- Decorator
---- takes a function as input, and wrapps behaviour on the input
--- Bridge
--- Facade
--- Proxy
--- Composite
--- FlyWeight

-- Behavioral:

--- Chain Of Responsibility
---- cpp error handling
--- Iterator
--- Visitor
--- State
--- Memento
--- Mediator
--- Observer
--- State
--- Strategy
--- Template









- architectual patterns: scoped in the dev design 

-- Messaging Arch-Patterns
-- error handling patterns
--- what here? if the types of messages mostly go to processes mapping

--a(ction)d(omain)r(esponder)
---m(odel)v(iew)c(ontroller)
----controller recivrd request
----controller forwards signals model's data
----controller manupilates data and signals view
----view returns a response




--- REST & CRUD
---- in http: create -> post, read -> get, update -> put, delete -> delete
--- ZeroMQ:
---- Requet-Reply
---- Publish-Subscribe
---- Push-Pull
---- Exclusive-Pair



-- Model View Controller
-- ?

dependencies

runtime environments 

frameworks

- node.js
-- 




system's API design (where to put this?)








Runtime environments (More loosely restricting containers)
-nodejs
--open source
--uses v8 engine
---written in cpp
---converts js to machine code
--encapsulates js outside browser
--non blocking container (single server internal load balancer)
--used for server side and netowrking









static vs shared libraries
- static libraries is static copied code : lib
- shared libraries is dynamic linking : dll, dylib
-- most dependencies are shared libraries! -> to enable sharing and wastefull minimise on prem copies
--- dependency hell is real, direct importing of a lot of libraries can cause it
---- unlike regular installers, package managers try and solve this versioning issue
----- tools like npm and maven handle libraries like mongoose to not cause dependency hell

- mern, django, firebase, where to put restful? in arch?












Frameworks










< < < < < < < < Dependencies > > > > > > > >

% % % % % % % Static Libraries % % % % % % %

- Linked at compile time







% % % % % % % Shared Library % % % % % % %

- API called at runtime























 Design patterns are usually associated with code level commonalities. It provides various schemes for refining and building smaller subsystems. It is usually influenced by programming language. Some patterns pale into insignificance due to language paradigms. Design patterns are medium-scale tactics that flesh out some of the structure and behavior of entities and their relationships.

While architectural patterns are seen as commonality at higher level than design patterns. Architectural patterns are high-level strategies that concerns large-scale components, the global properties and mechanisms of a system.

How are patterns obtained? Through:

re-use,
classification
and finally abstraction to distill the commonality.
If you have followed the thoughts laid above. You will see that Singleton is a "design pattern" while MVC is one of the "architectural" pattern to deal with separation of concerns.



http://en.wikipedia.org/wiki/Architectural_pattern_(computer_science)
http://en.wikipedia.org/wiki/Design_pattern
http://en.wikipedia.org/wiki/Anti-pattern
























































