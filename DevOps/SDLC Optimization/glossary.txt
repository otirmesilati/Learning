

- environments (servers) along the SLDC:
-- local (mostly dev's computers)
-- staging (for testing and demos)
-- production (the product is in customer hands!) -> open netflix.com, that's their production environment

common questions:
- how long does it take to go from one step to the next>
- how long does the whole process take?
- what is slowing us down that i can remove?









ci - tests and merge automations
-the process of getting the envrionments to make SLDC efficient
--doing it through jobs - running scripts 
---run this code
---trigger it in:
----times
-----getting the dev environment ready at morning and shutting it down via scripts at night
-----shutting it down on holidays and weekends
----events
-----After succesful run send an email to inform other individuals
--good ci? - run this artifact
-ci tools are not enough alone for a software department, it is not practical
--running a job unmanaged
--not in one place
--until 2015 - the main ci tool is jenkins, from then on - configurations in gitlab ci
---gitlabs started working with yaml files instead of the jenkins stages
----jenkins reacted with jenkins-pipelines to codify the jobs

-gitflow - version control standard
-- master branch - used for production environment
---dev branch - used for dev environment
---release - going from dev to production
---hotfix to fix prod bugs
--jenkins git-flow integration: source of truth + actions
---commiting straight into remote - bad practice, loads of bugs in the remote
----solution: shift-left perspective, instead of pushing it essily to remote with a lot of bugs later, we do a lot of testing and bug fixing in the begining - and push it easily to the remote
(it's called that becuase visually, it looks like we mirror shifted a graph)
---communicated event triggers - push, pull, commit - enable job scheduling
---cloning the source of truth into workspaces (local scheduler replica)

transitioning from ci to cd
-artifact goes through the stages
--its important it goes out with all it's dependencies, including permissions
---targz/zip files









---save up the environment costs 
cd
-the deployment of the application
-downloading the artifact from source
--opening it's contents










































& & & & & & Problems Coming up in the process & & & & & &

^ ^ ^ ^ ^ Requirements ^ ^ ^ ^ ^

^ ^ ^ ^ ^ Design ^ ^ ^ ^ ^


(leave this portion here in optimization? 
or rather transfer it to Design/language skill codex?)
^ ^ ^ ^ Arithmatic Code Design Skills ^ ^ ^ ^

1. Know how to manipulate numbers:
- how to cut digits
- how to add digits

^ ^ ^ ^ ^ Testing ^ ^ ^ ^ ^


1. UnClear Goals
2. Missed Goals
3. Communication problems
4. Lack of visualization tools:
4.1. Have Visual Tools one the first meet up
4.2. Have The visual tools accesible through out the code desgin process
4.3. Right After Getting done building a pseudo code:
4.3.1. Explain it to yourself, visualise the compilation
4.3.2. try to break the idea down 
5. Help The Developer while they are stuck
6. Each developer takes pseudo code and interperts it his own way:
6.1. though they differ in peudoing and translating their ideas to viable code, they should reach similar end points of Design
6.2 maybe a tool to ease the two proccesses of PSEUDO + TRANSLATE IDEAS?
7. sluggish proedures:
7.1. slow idea transferring
7.2. unclear instructions

Top of the head solutions

 Establishing a communication line (Team chat) 
 Having the team meetup and catch up on further Goals (Daily)

Crowd's input
