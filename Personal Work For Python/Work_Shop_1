
#   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&   Workshop : 1            &&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&   LANGUAGE: Python        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&   Date: 04/01/2024        &&&&&&&&&&&&&&&&&&&&&&&&&&&&&
#   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&   Author: Otir Mesilati   &&&&&&&&&&&&&&&&&&&&&&&&&&&&&
"""
-> Functions: 6

Function Specifications:

1. make_3d_point: A constructor like function to make a 3D point
   IN:   3 numbers as coordinates
   OUT:  a three cell tuple

2. get_x : A getter for the x parameter of a 3D point
   IN:   a three cell tuple
   OUT:  the point's x value

3. get_y: A getter for the y parameter of a 3D point
   IN:   a three cell tuple
   OUT:  the point's y value

4. get_z: A getter for the z parameter of a 3D point
   IN:   a three cell tuple
   OUT:  the point's z value

5. view_point: value printing function for a 3D point
   IN:   a three cell tuple
   OUT:  a string containing the three cell tuple's parameters

6. distance_of_two_points: distance calculation function for 2 3D points
   IN:   2 three cell tuples
   OUT:  a three cell tuple of the points distance

"""

# Constraints & Dependencies: Non.


def playing_with_points():
    def make_3d_point(x_value, y_value, z_value):
        return x_value, y_value, z_value

    def get_x(point):
        return point[0]

    def get_y(point):
        return point[1]

    def get_z(point):
        return point[2]

    def view_point(point):
        print("3D point:", point)

    def distance_of_two_points(first_point, second_point):
        return (get_x(second_point) - get_x(first_point), get_y(second_point) - get_y(first_point),
                get_z(second_point) - get_z(first_point))

    # Testing will be done here
    def testing_function():
        my_point = make_3d_point(1, 2, 3)
        print("The point we created is: ", my_point)
        print("x:", get_x(my_point), "  y:", get_y(my_point), "  z:", get_z(my_point))
        view_point(my_point)
        my_second_point = make_3d_point(4, 5, 6)
        print("The distance is:", distance_of_two_points(my_point, my_second_point))

    testing_function()  # let the testing COMMENCE!
    pass


def mainly():
    pass


playing_with_points()
mainly()

# bundling method for the Inner functions
# main function will do a bit of fluff and will use the bundling function


# Main function ?

# TODO:
# 1. Get the mainly function to activate the playing function
# 2. Patch up the outer playing function
# 3. Outer function's Scope and variables
# 4. Outer function's logic
