Imperative Mathematical Code Design Skills:
- Solve the matematical problem
- simplify story tell the math solution 
- Deciding to allocate more variables (usually from needed behaviour):
-- storage
-- counters
- Preforming manipulations on variables






   & & & & & & C Lectures & & & & & &  

   ^ ^ ^ ^ ^ Lecture 3 ^ ^ ^ ^ ^ 
   
Lecture Problem Ideas:
1. IN: Test grade
OUT: print test grade + 5 points

2. IN: int number
OUT: print boolean answer - is the number even?

3. IN: character
OUT: print - is it a digit? on not? 

4. IN: integer
OUT: print - negative or positive?

5. IN: two integers
OUT: print the biggest

6. IN: integer
OUT: print - even or odd?

7. IN: integer
OUT: print - does the number have three digits? and - is it positive or negitive?

8. IN: three integers
OUT: print - biggest integer



   & & & & & & C++ Lectures & & & & & &

   ^ ^ ^ ^ ^ Lectue 1 ^ ^ ^ ^ ^

1. IN: None
OUT: Termial ( Power(all numbers from 1 to 100, power of 5) )

2.


   & & & & & & Python Lectures & & & & & &

   & & & & & & Java Lectures & & & & & &




& & & & & & Basics & & & & & &









^ ^ ^ ^ ^ Arithmetical ^ ^ ^ ^ ^






^ ^ ^ ^ Arithmetical Coding ^ ^ ^ ^










----------------------------------------------------------------------------------------------------------------------------------------



->> 1. Non_Decimal_To_Decimal(Decimal_Number, Source_Radix): <<-


TLDR: While there are still digits, add powers of digits by radix.

variables to add: position of a digit for calculations,
and the number to return after all additions

a. Position <- 0

b. Non_Decimal_Number <- 0



c. Copy_Of_Decimal <- Decimal_Number

d. WHILE(are_digits_left(Decimal_Number) NOT FALSE)

d.a. Non_Decimal_Number <- Add_Two_Integers(Non_Decimal_Number ,Multiply_Two_Integers(Copy_Of_Decimal % 10, Power_Number(Source_Radix, Position))

d.b Copy_Of_Decimal / 10

d.c Position <- Position + 1

e. RETURN Non_Decimal_Number



---------------------------------------------------------------------------------------------------------------------------------------









---------------------------------------------------------------------------------------------------------------------------------------



2. Decimal_To_Non_Decimal(Decimal_Number, Destination_Radix)


TLDR: while the number is not 0, keep dividing by the destination radix

<- Variables ->
Non_Decimal_Number: literally the returned value
zeros_counter: help with the calculation of adding the zeros into the number

a. Non_Decimal_Number <- 0

b. zeros_counter <- 0


<- Number manipulation: getting the digits for the non decimal number->


a. WHILE(Non_Decimal_Number NOT 0)

a.a. reminder <- Non_Decimal_Number % Destination_Radix 

a.b. IF(remainder IS 0)

a.b.a. TRUE: 

a.b.a.a. zeros_counter <- zeros_counter + 1

a.b.b. FALSE:

a.b.b.a. Non_Decimal_Number <- Multiply_Two_Integers(remainder ,Power_Number(10, zeros_counter)) + Non_Decimal_Number

a.b.b.b. zeros_counter <- 0

a.c. Decimal_Number <- Decimal_Number / Destination_Radix



----------------------------------------------------------------------------------------------------------------









----------------------------------------------------------------------------------------------------------------



3. Fast_Straight_Conversion(Source_Radix, Destination_Radix, Original_Number)


TLDR: finding out the exponent which connects the two radixi,
and according to it - we'll translate the digits from the original number
into the digits of the new number.




Problem: the operation will be different according to if
the destination radix is bigger than the source,
and different if it is smaller! what's the solution here?


Fix: Conditioning the control flow
if the source is bigger - we'll *expend
if the source is lower - we'll **shorten







*expend: making an exponent long number and adding it to the initial number
** shorten: on the exponent long number of digits - invoke the decimal conversion 

<- Variables ->
a. Transition_Exponent <- N_Root(Source_Radix, Destination_Radix)





make new number
take digit - modulo 10 in a loop
translate digit - 







<- Number manipulation: getting the digits for the non decimal number->






a. WHILE(Non_Decimal_Number NOT 0)

a.a. reminder <- Non_Decimal_Number % Destination_Radix 

a.b. IF(remainder IS 0)

a.b.a. TRUE: 

a.b.a.a. zeros_counter <- zeros_counter + 1

a.b.b. FALSE:

a.b.b.a. Non_Decimal_Number <- Multiply_Two_Integers(remainder ,Power_Number(10, zeros_counter)) + Non_Decimal_Number

a.b.b.b. zeros_counter <- 0

a.c. Decimal_Number <- Decimal_Number / Destination_Radix












-- problems from converting from one radix to another? 

^ ^ ^ Dimensional Analysis ^ ^ ^

1. cents to dollars

-- maybe add in the notebook problems like 
converting cents to dollars? shekels to Agurot?

2.1 calculating a final price for a purchase
2.2 Calculating a precent discount 
2.3 calculating final + discount

-- move in the notebook the place of roundings
from elementary analysis to Arithmatic
specifically: to Arith Coding
After Dimensional analysis

^ ^ ^ Algorismics ^ ^ ^



2. Add_Two_Integers(first_number, second_number):

TLDR: While there are still digits, add current digits together

a. Summed_Number <- 0
b. WHILE(are_digits_left(number) NOT FALSE)
b.a. Summed_Number <- first_number % 10 + second_number % 10
c. RETURN Summed_Number 

2. addition of three numbers - no input

3. 

^ ^ ^ ^ ^ Number theory ^ ^ ^ ^ ^

a. are_digits_left(number):
a.a IF number > 0
a.a.a. TRUE
a.a.b FALSE

2. Power_number


1. is_A_Poisitve?
IN:
OUT:

2.1 is_A_Digit?
IN: symbol
OUT: an answer if it was a digit or not

2.2. if_A_Digit_Inc
IN:
OUT:

3.1 which of two numbers is bigger?

3.2 three numbers

^ ^ ^ ^ ^ Iterations ^ ^ ^ ^ ^

1.1. Termial function

1.2. Average function

2.2 (use 1. function from arith)multiplying function
.3 power function


^ ^ ^ ^ ^ Recursion ^ ^ ^ ^ ^

^ ^ ^ ^ ^ Arrays ^ ^ ^ ^ ^
searching?
sorting?
