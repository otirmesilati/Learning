< < < < < < < < Dependencies > > > > > > > >

% % % % % % % Static Libraries % % % % % % %

- Linked at compile time







% % % % % % % Shared Library % % % % % % %

- API called at runtime























 Design patterns are usually associated with code level commonalities. It provides various schemes for refining and building smaller subsystems. It is usually influenced by programming language. Some patterns pale into insignificance due to language paradigms. Design patterns are medium-scale tactics that flesh out some of the structure and behavior of entities and their relationships.

While architectural patterns are seen as commonality at higher level than design patterns. Architectural patterns are high-level strategies that concerns large-scale components, the global properties and mechanisms of a system.

How are patterns obtained? Through:

re-use,
classification
and finally abstraction to distill the commonality.
If you have followed the thoughts laid above. You will see that Singleton is a "design pattern" while MVC is one of the "architectural" pattern to deal with separation of concerns.



http://en.wikipedia.org/wiki/Architectural_pattern_(computer_science)
http://en.wikipedia.org/wiki/Design_pattern
http://en.wikipedia.org/wiki/Anti-pattern

























dev design
tablet skills - umling the design patterns

- design patterns: scoped in the logic design 

-- Creational:
--- Singleton
--- Prototype
--- Factory
--- Abstract Factory
--- Builder

-- Structural:

--- Adapter
--- Decorator
--- Bridge
--- Facade
--- Proxy
--- Composite
--- FlyWeight

-- Behavioral:

--- Chain Of Responsibility
--- Iterator
--- Visitor
--- State
--- Memento
--- Mediator
--- Observer
--- State
--- Strategy
--- Template









- architectual patterns: scoped in the dev design 

-- Messaging Arch-Patterns
-- error handling patterns
--- what here? if the types of messages mostly go to processes mapping






--- REST

--- ZeroMQ:
---- Requet-Reply
---- Publish-Subscribe
---- Push-Pull
---- Exclusive-Pair



-- Model View Controller
-- ?

dependencies

runtime environments 

frameworks

- node.js
-- 




system's API design (where to put this?)
