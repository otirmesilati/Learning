move this to the appropriate mapping (maybe big projects mapping?):
FS Project

- Setting up app server -> run on terminal "npm init" 
-- fill in the Detailes of the project

- Setup Gitignore with node_modules - so it be problematic later on
-initiating the web server -> run on terminal "npm i express"
--Automatically created - package json

-creating the main app module -> creating app.js file
-Using the express library -> in the app.js, "const express = require('express');"
-- calling it as a function -> in the app.js, "const app = express();"

-creating basic request
--Using the express get functionality -> in app.js, app.get(); 
--- passing the functionality as an arrow callback -> in the function, ('/', (req, res) => {})
----responsing a Hello World -> {res.send('Hello World!);}

-start the web server on a port
--using the express set functionality -> in app.js, app.listen();
--- passing the functionality as an arrow callback -> in the function, (port , () => {})
---Notifying in the terminal for success -> console.log('Yay');

Setting up REST client
-requests file -> create requests.rest file
-- making the former get request through the client -> in requests.rest, GET http://localhost:3001
-- testing -> pressing the Send Request option 

Setting up nodemon for comfortablity refresh
-install nodemon -> npm i --save-dev nodemon 
-updating package json
--running nodemon -> "devstart: nodemon app.js" 

Setting up dotenv for Constants environment
-install env -> npm install dotenv
--file creation -> creating .env file
--defining the port constant -> PORT = 3000

Update - app.listen() function by dotenv update
- reading the constant from dotenv
-- importing the ditenv file -> in app,js, "const dotenv = require('dotenv').config();"
-- creating a local port variable -> "const port = process.env.PORT;"
--- Change the existing port -> from const PORT = 3000; ==> const PORT = process.env.PORT;

Building the Routing Logic
- for checking purposes, we'll expand our backend logic 
--change the get function to be routed to post logic -> change '/' path to '/test'
--adding two get and post functions in the back to app.js
-> app.get('/post', (req, res)) {res.send('app get post')}
-> app.post('/post', (req, res)) {res.send('app post post')}
-- And Update on the front - the REST client requests:
-> Change GET http://localhost:3001 ==> GET http://localhost:3001
--Adding the two client requests
-> GET http://localhost:3001/post
-> POST http://localhost:3001/test

-Setting up the routing logic
-- Moving the post function into routes/post_routes.js
--importing express -> in post_routes.js
-- Adding the express' router --> in post_routes.js, const router = express.Router();
-- Delegating App's client API logic to the express router -> changing app.get and app.post to router.get and router.post
--exporting to app.js
--- enable exportation -> in routes_post.js, "module.exports = router;"
--- using routing logic in app.js -> in app.js, "app.use();"
--- chain of responsibility into the route in the function -> in the parantheses, put the two parameters "'/post', post_routes"

-Setting up the controller logic
-- Creating the Controllers Folder
-- Moving functionality logic from routing to controller
--- make the post.js file
---- move the functions from routes to post.js
---- export the function
----connect to app.js

-Setting up DataBase - using mongoose
-- install the mongoose packages -> run in terminal "npm i mongoose"
--requiring the mongoose dependency -> in app.js, "const mongoose = require('mongoose');"
--connecnt the DB
--- connecting the DB through the connect function -> in app.js "mongoose.connect();"
----passing the url -> "process.env.DATABASE_URL, {useNewUrlParses: true}"
---wrapping the connection inside a local variable -> in app.js "const db = mongoose.connection"
---error handling
---- fail -> db.on('error', error=>{console.error(error)});
---- success -> db.once('open', ()=>{console.log('Connected to MongoDB');});

Building the post's model
- Creating a new models folder
--creating a post model js file
---requiring mongoose, in post models
---Building the post schema
---- wrapping the schema in postSchema variable -> in post_model, "const postSchema = new mongoose.Schema({});"
-----Two attributes:
------ Message string attribute
------ Sender string attribute 
---exporting the model -> in post_model.js, "module.exports = mongoose.model('Post',postSchema);"

Configuring a response parses
- Using the body Parser -> run in terminal "npm i body-parser"
--making the local wrapper -> in app.js, "const body-parser = require('body-parser');"
--using the url encoder and a json encoder:
-> app.use(bodyParser.urlencoded({extended: true, limit: '1mb'}));
-> app.use(bodyParses.json());

Creating a New Post ub the DB
-require the model -> in post.js, "const post = require('../models/post_model');"
-creating the new post logic in function -> in post.js, "const createNewPosts = async (req, res) ==> {}
--trying to log and create a post using the schema
-> console.log(req.body);
-> const post = new Post({}) -> message: req.body.message, sender: req.body.sender

Saving a new post in the DB
- callbacking async through the use of wait -> in post.js, "const newPost = await post.save();"
- sending the response back -> res.status(200).send(newPost);
- inputting an error handling behaviour

Listing posts in the DB (Basically the same implemantation as the above step)
-changing the getAllPosts function into async
-adding the try and catch blocks
-- in the try block, invoking the post's find -> "const posts = await Post.find();" 

Finding the post by id in the DB(same implementation as the two above)
-Creating getPostById
--adding the getPostById to the 
--- print the id in the terminal -> "console.log('getPostById:' + req.params.id);"
-add an appropriate route -> in post_routes, "router.post('/:id'. Post.getById);"







scalabile problems:
-more incoming requests than responses

web server - static pages serving and request handling
-express - web server building
--my_app.get - first response function - the response to recieve
--my_app.listen - opening a port to listen to

app server - app logic handling 
-node js
--file structure
---package.json - project configuration
----name, version, description, author, license, homepage
----scripts
----repository
----bugs
----dependencies
---node-modules - node libraries
---package-lock - version management of dependency versions
--nodemon utility - restarts app after changes are made
--dotenv - parameters configuration

-routing
--pathing to resources - activating functions in the backend
--routing handlers:
---express' router object

Map from the following:
1. 



Playlists To Finish:
- Django tutorial : https://www.youtube.com/watch?v=3EzKBFc9_MQ&list=PL4cUxeGkcC9iqfAag3a_BKEX1N43uJutw&index=14


A handy list (delete later)
node + express + mysql
typescript + nest + nosql
python + django + postgressql
js + react + firebase
java + springboot + postgressql
python + flast + mysql
go + gin + postgressql