android studio
-dependencies
--sdk
--jdk
--virtual device emulator (A(ndroid)V(irtual)D(evice) manager)
-android profiler - monitoring


-install
--package name - unique for each app, (convention to put web name backwards)
--api level: older machines support
---bigger level - more functionalities
---95% device support is preferable


-types of files
--layout files - View portion, looks/styling of app(equivilent of CSS)
--java files - Controller portion, app logic


-project explorer
-project view - a lot of stuff on screen
-android view structure - a smaller portion of project view
--tests packages
--manifests: artifacts the code
---written in XML
---bundle requirements for the APK, includes:
----components and activities
----resources
----libraries
----permissions
--java: represents controller
---main activity
--res: represents view, can hold resources
---layout - loaded in onCreate method, or called in setContentView by passing the refence to the layout resource (R.layout.layout_file_name)
----activity_main.xml
-----design view
-----text view
---values
-gradle scripts: artifiacts projects into APK

-essential components
--activities - proccesses
---visual UI
---infrastructured as an hierarchy of classes
----appcompactactivity - sdk activity
----mainactivity
---each activity is independant of others
---one activity is the first to be presented to the user and acts as a main proccess which all others run on
---each activity starts the next one - according to initial intent





----Activity LifeCycle:
-----onCreate function (acts as ctor)
-----onStart - put the activity in the stack and viewable
-----onResume - the activity is functionable
-----onPause - the activity is not visible, running in the background
-----onStop - the activity is not running anymore, can transition to onStart
-----onDestroy - kill activity

-----requestFocus to force into a specific view and setVisibility to show or hide views
-----getLeft/Top/Right/Bottom for the view pixels location
-----finish() or finishActivity by another activity
----startActivity function - returns data to initiator through onActivity intent
----passing additional intents through onNewIntent
---intents - messaging android that an activity is needed
----holds message content
----request to get resources
----names the action anounced in the broadcast reciever
--services - background processes
---infrastructed as an hierarchy of classes
---possible to connect to a service through an intended interface
---also run in the main 
--broadcast receivers - mobile signals  
---start activities to respond to information
---may use notification manager to alert the user
--content providers - enables outer mobile communiation
---handles communication API
---it's data probably stored at a designated DB
----the data can be accessed through contentresolver (which can talk to any content provider)



creating a new activity: (Java)
Intent my_intent = new Intent(this.MainActivity2.class);
startActivity(my_intent);

logging the debug process(direct debug is not the same with the AVD container):
protected void onStart() {
    super.onStart();
    Log.d("Tag", "onStart);
}

identifying components + changing them in a comftorable way(creating local variables that connect to the layouts):
TextView title = findViewById(R.id.mainactivity_title);
title.setText("This is main title");


Trigering on click:
nextBtn.setOnClickListener(new View.onClickListener(){
    @Override
    public void onClick(View view){
        
    }
});

